#include <stdio.h>   // Подключаем библиотеку для работы с вводом/выводом
#include <stdlib.h>  // Подключаем библиотеку для работы с памятью и конвертацией типов
#include <string.h>  // Подключаем библиотеку для работы со строками
// Определяем структуру P (Person) для хранения данных о человеке
typedef struct {
    char n[20]; // Имя (максимум 19 символов + 1 для нуль-терминатора)
    char s[20]; // Фамилия (максимум 19 символов + 1 для нуль-терминатора)
    char g;     // Пол (gender) 'M' или 'F'
    int y;      // Год рождения (year)
    float h;    // Рост в метрах (height)
} P;
// Функция сравнения для сортировки
// a и b - элементы для сравнения, f - массив полей сортировки
int c(P *a, P *b, int *f) {
    for(int i = 0; f[i]; i++) { // Перебираем все указанные поля сортировки
        int r = 0; // Результат сравнения
        switch(f[i]) { // В зависимости от выбранного поля
            case 1: r = a->y - b->y; break; // Сравнение по году рождения
            case 2: r = strcmp(a->n, b->n); break; // Сравнение по имени
            case 3: r = strcmp(a->s, b->s); break; // Сравнение по фамилии
            case 4: r = a->g - b->g; break; // Сравнение по полу
            case 5: r = (a->h > b->h) ? 1 : (a->h < b->h) ? -1 : 0; break; // Сравнение по росту
        }
        if(r) return r; // Если элементы отличаются, возвращаем результат сравнения
    }
    return 0; // Если все поля равны, возвращаем 0
}
int main() {
    P p[100]; // Массив для хранения данных о людях (максимум 100 человек)
    int n = 0, // Счетчик загруженных записей
        f[6] = {0}, // Массив для хранения полей сортировки (5 полей + 0 в конце)
        i = 0; // Индекс для заполнения массива полей сортировки
    char t[10]; // Буфер для ввода пользователя
    FILE *file = fopen("data.txt", "r"); // Открываем файл "data.txt" для чтения данных о людях
    while(fscanf(file, "%19s %19s %d %c %f", p[n].n, p[n].s, &p[n].y, &p[n].g, &p[n].h) == 5)
        n++; // Увеличиваем счетчик при успешном чтении данных о человеке
    printf("Uploaded %d records. Sort by: 1-year 2-first name 3-last name 4-gender 5-height: ", n);
    fgets(t, sizeof(t), stdin); // Читаем ввод пользователя в буфер t
    char *tok = strtok(t, " "); // Разбиваем ввод по пробелам на токены
    while(tok && i < 5) { 
        int v = atoi(tok); // Преобразуем токен в целое число
        if(v > 0 && v < 6) // Проверяем корректность введенного значения (от 1 до 5)
            f[i++] = v;   // Сохраняем выбранное поле в массив f         
        tok = strtok(NULL, " "); // Переходим к следующему элементу ввода
    }
    // Сортировка пузырьком с использованием нашей функции сравнения
    for(int i = 0; i < n-1; i++) 
        for(int j = 0; j < n-i-1; j++)
            if(c(&p[j], &p[j+1], f) > 0) { // Если порядок неправильный по сравнению с выбранными полями сортировки
                P t = p[j];   // Меняем местами элементы массива p[j] и p[j+1]
                p[j] = p[j+1];
                p[j+1] = t;
            }
    // Вывод результатов на экран в формате таблицы
    printf("\n%-15s%-15s%-6s%-4s%s\n", "Name", "Familia", "Year", "Gender", "Height");
    for(int i = 0; i < n; i++) 
        printf("%-15s%-15s%-6d%-4c%.2f\n", p[i].n, p[i].s, p[i].y, p[i].g, p[i].h); 
        /* Выводим данные о каждом человеке в отформатированном виде:
           Имя | Фамилия | Год | Пол | Рост */
    return 0; // Завершаем программу с кодом возврата 0 (успешно)
}
