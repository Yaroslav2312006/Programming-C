#include <stdio.h>  // Подключаем библиотеку для работы с вводом/выводом
#include <stdlib.h> // Подключаем библиотеку для работы с динамической памятью
// Объявление функций из другого модуля
double **create_matrix(int n); // Функция для создания матрицы размером n x n
void free_matrix(double **matrix, int n); // Функция для освобождения памяти матрицы
void input_matrix(double **matrix, int n, const char *name); // Функция для ввода матрицы
void print_matrix(double **matrix, int n); // Функция для вывода матрицы
double **matrix_operation(double **A, double **B, int n, char op); // Функция для выполнения операций над матрицами
int main() { // Начало главной функции программы
    int n; // Переменная для хранения размера матриц
    char op; // Переменная для хранения операции над матрицами
    printf("Введите размер матриц (n): "); // Запрос размера матриц у пользователя
    scanf("%d", &n); // Считываем размер матриц
    if (n <= 0) { // Проверка на корректность введенного размера
        printf("Ошибка: размер матрицы должен быть положительным!\n"); // Сообщение об ошибке
        return 1; // Завершение программы с кодом ошибки 1
    }
    // Создаём две матрицы A и B размером n x n
    double **A = create_matrix(n); // Создание первой матрицы A
    double **B = create_matrix(n); // Создание второй матрицы B
    if (!A || !B) { // Проверка на успешность выделения памяти для обеих матриц
        printf("Ошибка выделения памяти!\n"); // Сообщение об ошибке выделения памяти
        return 1; // Завершение программы с кодом ошибки 1
    }
    // Вводим элементы обеих матриц от пользователя
    input_matrix(A, n, "A"); // Ввод элементов первой матрицы A
    input_matrix(B, n, "B"); // Ввод элементов второй матрицы B
    // Вводим операцию над матрицами от пользователя
    printf("Введите операцию (+, -, *): "); // Запрос операции у пользователя
    scanf(" %c", &op);  // Считываем операцию. Пробел перед %c пропускает лишние символы.
    // Выполняем операцию над двумя матрицами A и B в зависимости от введенной операции op.
    double **result = matrix_operation(A, B, n, op); 
    if (!result) { // Проверка на успешность выполнения операции (результат не должен быть NULL)
        printf("Ошибка: некорректная операция или память не выделена!\n"); // Сообщение об ошибке выполнения операции
    } else {
        printf("Результат:\n"); // Сообщение о начале вывода результата операции
        print_matrix(result, n); // Вывод результата операции над матрицами
    }
    // Освобождаем память, выделенную под все три матрицы (A, B и результат)
    free_matrix(A, n); 
    free_matrix(B, n);
    free_matrix(result, n);
    return 0; // Завершение программы с кодом успеха 0
}
