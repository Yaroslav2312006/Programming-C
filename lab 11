#include <stdio.h>    // Подключаем библиотеку для ввода-вывода
#include <stdarg.h>    // Подключаем библиотеку для работы с переменным количеством аргументов
#include <limits.h>    // Подключаем библиотеку для определения предельных значений типов данных

// Объявляем функции для вычисления суммы, среднего, максимума и минимума
double sum(int count, ...);
double average(int count, ...);
int max(int count, ...);
int min(int count, ...);

int main() {
    int count = 5; // Количество аргументов

    // Выводим сумму переданных чисел
    printf("Сумма: %.2f\n", sum(count, 1, 2, 3, 4, 5));
    
    // Выводим среднее арифметическое переданных чисел
    printf("Среднее: %.2f\n", average(count, 1, 2, 3, 4, 5));
    
    // Выводим максимальное значение среди переданных чисел
    printf("Максимум: %d\n", max(count, 1, 2, 3, 4, 5));
    
    // Выводим минимальное значение среди переданных чисел
    printf("Минимум: %d\n", min(count, 1, 2, 3, 4, 5));

    return 0; // Завершаем программу
}

// Функция для вычисления суммы
double sum(int count, ...) {
    va_list args; // Объявляем переменную для хранения списка аргументов
    double total = 0.0; // Инициализируем переменную для хранения суммы

    va_start(args, count); // Инициализируем список аргументов

    for (int i = 0; i < count; i++) { // Цикл по количеству аргументов
        total += va_arg(args, int); // Извлекаем следующий аргумент и добавляем к сумме
    }
    
    va_end(args); // Завершаем работу со списком аргументов

    return total; // Возвращаем сумму
}

// Функция для вычисления среднего арифметического
double average(int count, ...) {
    if (count == 0) return 0.0; // Если количество аргументов равно нулю - возвращаем ноль (избегаем деления на ноль)

    double total = sum(count); // Используем функцию sum для получения суммы
    return total / count; // Возвращаем среднее арифметическое
}

// Функция для нахождения максимума
int max(int count, ...) {
    if (count == 0) return INT_MIN; // Если количество аргументов равно нулю - возвращаем минимальное значение int

    va_list args; // Объявляем переменную для хранения списка аргументов
    int maximum; // Переменная для хранения максимального значения

    va_start(args, count); // Инициализируем список аргументов
    
    maximum = va_arg(args, int); // Инициализируем максимум первым элементом
    
    for (int i = 1; i < count; i++) { // Цикл по оставшимся аргументам
        int value = va_arg(args, int); // Извлекаем следующий аргумент
        
        if (value > maximum) { // Если текущий элемент больше максимума,
            maximum = value;   // обновляем максимум.
        }
    }
    
    va_end(args); // Завершаем работу со списком аргументов

    return maximum; // Возвращаем максимальное значение
}

// Функция для нахождения минимума
int min(int count, ...) {
    if (count == 0) return INT_MAX; // Если количество аргументов равно нулю - возвращаем максимальное значение int

    va_list args; // Объявляем переменную для хранения списка аргументов
    int minimum; // Переменная для хранения минимального значения

    va_start(args, count); // Инициализируем список аргументов
    
    minimum = va_arg(args, int); // Инициализируем минимум первым элементом
    
    for (int i = 1; i < count; i++) { // Цикл по оставшимся аргументам
        int value = va_arg(args, int); // Извлекаем следующий аргумент
        
        if (value < minimum) { // Если текущий элемент меньше минимума,
            minimum = value;   // обновляем минимум.
        }
    }
    
    va_end(args); // Завершаем работу со списком аргументов

    return minimum; // Возвращаем минимальное значение
}
