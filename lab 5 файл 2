#include <stdio.h>
#include <stdlib.h>
// Создание матрицы n x n
double **create_matrix(int n) {
    double **matrix = (double **)malloc(n * sizeof(double *));
    if (!matrix) return NULL;
    for (int i = 0; i < n; i++) {
        matrix[i] = (double *)malloc(n * sizeof(double));
        if (!matrix[i]) {
            // Если выделение не удалось, освобождаем уже выделенную память
            for (int j = 0; j < i; j++) {
                free(matrix[j]);
            }
            free(matrix);
            return NULL;
        }
    }
    return matrix;
}
// Освобождение памяти матрицы
void free_matrix(double **matrix, int n) {
    if (!matrix) return;
    for (int i = 0; i < n; i++) {
        free(matrix[i]);
    }
    free(matrix);
}
// Ввод матрицы
void input_matrix(double **matrix, int n, const char *name) {
    printf("Введите элементы матрицы %s (%d x %d):\n", name, n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%s[%d][%d] = ", name, i, j);
            scanf("%lf", &matrix[i][j]);
        }
    }
}
// Вывод матрицы
void print_matrix(double **matrix, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%8.2lf ", matrix[i][j]);
        }
        printf("\n");
    }
}
// Операции с матрицами (+, -, *)
double **matrix_operation(double **A, double **B, int n, char op) {
    double **result = create_matrix(n);
    if (!result) return NULL;

    switch (op) {
        case '+':
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    result[i][j] = A[i][j] + B[i][j];
                }
            }
            break;
        case '-':
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    result[i][j] = A[i][j] - B[i][j];
                }
            }
            break;
        case '*':
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    result[i][j] = 0;
                    for (int k = 0; k < n; k++) {
                        result[i][j] += A[i][k] * B[k][j];
                    }
                }
            }
            break;
        default:
            free_matrix(result, n);
            return NULL;
    }
    return result;
}
